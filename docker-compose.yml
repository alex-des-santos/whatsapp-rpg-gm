version: '3.8'

services:
  # Aplicação principal do WhatsApp RPG GM
  whatsapp_rpg_gm:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp-rpg-gm
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://rpg_user:rpg_password@postgres:5432/rpg_db
      - REDIS_URL=redis://redis:6379/0
      - VERIFY_TOKEN=${VERIFY_TOKEN}
      - EVOLUTION_API_URL=${EVOLUTION_API_URL}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - INSTANCE_NAME=${INSTANCE_NAME}
      - AI_PROVIDER=${AI_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      # Volume para dados do jogo persistentes
      - game_data:/app/data
      # Volume para logs da aplicação
      - logs_data:/app/logs
      # Volume para sessões do WhatsApp
      - whatsapp_sessions:/app/sessions
      # Volume para personagens salvos
      - characters_data:/app/characters
      # Volume para backups automáticos
      - backups_data:/app/backups
      # Volume para configurações de IA
      - ai_configs:/app/ai_configs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpg_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Interface GUI com Streamlit
  rpg_gui:
    build:
      context: .
      dockerfile: Dockerfile.gui
    container_name: whatsapp-rpg-gui
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://whatsapp_rpg_gm:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - gui_data:/app/gui_data
    depends_on:
      - whatsapp_rpg_gm
    networks:
      - rpg_network

  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15
    container_name: rpg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: rpg_db
      POSTGRES_USER: rpg_user
      POSTGRES_PASSWORD: rpg_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - rpg_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rpg_user -d rpg_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: rpg-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rpg_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx para proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: rpg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - whatsapp_rpg_gm
      - rpg_gui
    networks:
      - rpg_network

# Volumes persistentes
volumes:
  # Dados do jogo (estado do mundo, campanhas, etc.)
  game_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/game_data
  
  # Logs da aplicação
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/logs
  
  # Sessões do WhatsApp
  whatsapp_sessions:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/sessions
  
  # Dados de personagens
  characters_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/characters
  
  # Backups automáticos
  backups_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/backups
  
  # Configurações de IA
  ai_configs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/ai_configs
  
  # Dados da GUI
  gui_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/gui_data
  
  # Dados do PostgreSQL
  postgres_data:
    driver: local
  
  # Dados do Redis
  redis_data:
    driver: local

# Rede customizada
networks:
  rpg_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16